blueprint:
  name: "Gestion intelligente Velux et Volet"
  description: >
    Gère automatiquement l'ouverture/fermeture d'une fenêtre Velux et de son volet
    en fonction de la température intérieure/extérieure, du thermostat, de l'heure et des conditions météo.
    Ferme automatiquement le volet la nuit ou lors de fortes chaleurs, en s'assurant que la fenêtre est bien fermée.
    Ouvre automatiquement la fenêtre le matin si les conditions sont réunies.
  domain: automation
  input:
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    weather:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    velux:
      name: Entité de la fenêtre Velux
      selector:
        entity:
          domain: cover
    volet:
      name: Entité du volet roulant
      selector:
        entity:
          domain: cover
    sunset_time:
      name: Heure de fermeture du volet (soir)
      selector:
        time:
    sunrise_time:
      name: Heure d'ouverture automatique du matin
      selector:
        time:
    temp_rising:
      name: Indicateur de tendance température monte (booléen)
      description: "Entité binaire ou sensor indiquant si la température intérieure monte"
      selector:
        entity:
          domain: binary_sensor
    temp_falling:
      name: Indicateur de tendance température descend (booléen)
      description: "Entité binaire ou sensor indiquant si la température intérieure descend"
      selector:
        entity:
          domain: binary_sensor

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: time
    at: !input sunrise_time
    id: sunrise_trigger

variables:
  weather_entity: !input weather
  thermostat_entity: !input thermostat
  velux_entity: !input velux
  volet_entity: !input volet

  temp_rising_entity: !input temp_rising
  temp_falling_entity: !input temp_falling

  temp_ext: "{{ state_attr(weather_entity, 'temperature') | float(0) }}"
  temp_target: "{{ state_attr(thermostat_entity, 'temperature') | float(22) }}"
  temp_int: "{{ state_attr(thermostat_entity, 'current_temperature') | float(22) }}"
  is_night: "{{ now().strftime('%H:%M:%S') > (states('input_datetime.sunset_time') or '21:00:00') }}"
  velux_state: "{{ states(velux_entity) }}"
  velux_open: "{{ velux_state in ['opening', 'open'] }}"
  temp_rising: "{{ states(temp_rising_entity) == 'on' }}"
  temp_falling: "{{ states(temp_falling_entity) == 'on' }}"
  room_name: "{{ area_name(velux_entity) or 'pièce inconnue' }}"

action:
  - choose:
      # Cas 1 : température > consigne, température monte, fenêtre ouverte => fermer fenêtre puis volet
      - conditions:
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_rising and velux_open }}
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input velux
          - delay: "00:00:10"
          - service: cover.close_cover
            target:
              entity_id: !input volet

      # Cas 1 bis : température > consigne, température monte, fenêtre fermée => fermer volet
      - conditions:
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_rising and not velux_open }}
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input volet

      # Cas 2 : température > consigne, température extérieure plus basse, pas nuit => ouvrir fenêtre
      - conditions:
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_ext < temp_int and not is_night }}
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux

      # Cas 3 : température <= consigne et fenêtre ouverte => fermer fenêtre
      - conditions:
          - condition: template
            value_template: >
              {{ temp_int <= temp_target and velux_open }}
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input velux

      # Cas 4 : nuit ou forte chaleur => fermer volet (et sécuriser fenêtre si ouverte)
      - conditions:
          - condition: template
            value_template: >
              {{ is_night or (temp_ext > temp_target and temp_int > temp_target) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ velux_open }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: !input velux
                  - delay: "00:00:10"
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet
                  - delay: "00:00:30"
                  - service: cover.open_cover
                    target:
                      entity_id: !input velux
                default:
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet

      # Cas 5 : ouverture automatique matin si conditions réunies
      - conditions:
          - condition: trigger
            id: sunrise_trigger
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_ext < temp_int }}
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux
