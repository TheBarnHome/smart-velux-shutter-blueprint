blueprint:
  name: "Gestion intelligente Velux et Volet"
  description: >
    Gère automatiquement l'ouverture/fermeture d'une fenêtre Velux et de son volet
    en fonction de la température intérieure/extérieure, du thermostat, de l'heure et des conditions météo.
    Ferme automatiquement le volet la nuit ou lors de fortes chaleurs, en s'assurant que la fenêtre est bien fermée.
    Ouvre automatiquement la fenêtre le matin si les conditions sont réunies.
  domain: automation
  input:
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    weather:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    velux:
      name: Entité de la fenêtre Velux
      selector:
        entity:
          domain: cover
    volet:
      name: Entité du volet roulant
      selector:
        entity:
          domain: cover
    sunset_time:
      name: Heure de fermeture du volet (soir)
      selector:
        time:
    sunrise_time:
      name: Heure d'ouverture automatique du matin
      selector:
        time:
  
mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: time
    at: !input sunrise_time
    id: sunrise_trigger

variables:
  weather_entity: !input weather
  thermostat_entity: !input thermostat
  velux_entity: !input velux
  volet_entity: !input volet
  sunset_time: !input sunset_time
  sunrise_time: !input sunrise_time

  temp_ext: "{{ state_attr(weather_entity, 'temperature') | float(0) }}"
  temp_target: "{{ state_attr(thermostat_entity, 'temperature') | float(22) }}"
  temp_int: "{{ state_attr(thermostat_entity, 'current_temperature') | float(22) }}"
  now_ts: "{{ as_timestamp(now()) }}"
  night_start_ts: "{{ as_timestamp(now().replace(hour=22, minute=0, second=0)) }}"
  night_end_ts: >
    {% if now().hour < 7 %}
      {{ as_timestamp(now().replace(hour=7, minute=0, second=0)) }}
    {% else %}
      {{ as_timestamp((now() + timedelta(days=1)).replace(hour=7, minute=0, second=0)) }}
    {% endif %}
  is_night: >
    {% if night_start_ts > night_end_ts %}
      {{ now_ts >= night_start_ts or now_ts < night_end_ts }}
    {% else %}
      {{ now_ts >= night_start_ts and now_ts < night_end_ts }}
    {% endif %}
  velux_state: "{{ states(velux_entity) }}"
  velux_open: "{{ velux_state in ['opening', 'open'] }}"

  actions: >
    {% set acts = [] %}
    {# Cas température monte : on ouvre la fenêtre #}
    {% if temp_int > temp_target and temp_ext < temp_int %}
      {% set _ = acts.append('open_velux') %}
    {# Cas température descend : on ferme volet et fenêtre #}
    {% elif temp_int <= temp_target %}
      {% set _ = acts.append('close_velux') %}
      {% set _ = acts.append('close_volet') %}
    {# Sinon, température haute et extérieure plus élevée, on ferme volet #}
    {% else %}
      {% set _ = acts.append('close_volet') %}
    {% endif %}

    {# La nuit, volet doit impérativement rester fermé #}
    {% if is_night %}
      {% set _ = acts.append('close_volet') %}
    {% endif %}
    {{ acts }}

action:
  - choose:
      # Ouvrir la fenêtre Velux si demandé
      - conditions: "{{ 'open_velux' in actions }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux

      # Fermer la fenêtre Velux si demandé
      - conditions: "{{ 'close_velux' in actions }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input velux

      # Fermer le volet (avec gestion fenêtre ouverte)
      - conditions: "{{ 'close_volet' in actions }}"
        sequence:
          - choose:
              - conditions: "{{ velux_open }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: !input velux
                  - delay: "00:00:10"
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet
                  - delay: "00:00:30"
                  - service: cover.open_cover
                    target:
                      entity_id: !input velux
              - conditions: "{{ not velux_open }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet

      # Ouvrir le volet uniquement s'il ne fait pas nuit
      - conditions: "{{ 'open_volet' in actions }}"
        sequence:
          - choose:
              - conditions: "{{ is_night }}"
                sequence:
                  - service: persistent_notification.create
                    data:
                      message: "Ouverture volet refusée la nuit"
                      title: "Volet fermé la nuit"
              - conditions: "{{ not is_night }}"
                sequence:
                  - service: cover.open_cover
                    target:
                      entity_id: !input volet
