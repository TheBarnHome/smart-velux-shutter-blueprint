blueprint:
  name: Gestion automatique Velux et volet
  description: Ouvre et ferme automatiquement une fenêtre de toit Velux et son volet selon la température, la nuit et l'état intérieur/extérieur.
  domain: automation
  input:
    window_entity:
      name: Entité de la fenêtre
      selector:
        entity:
          domain: cover
    blind_entity:
      name: Entité du volet
      selector:
        entity:
          domain: cover
    thermostat_entity:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    temp_trend_entity:
      name: Entité de tendance de température (booléenne)
      selector:
        entity:
          domain: binary_sensor
    weather_entity:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    night_start:
      name: Heure de début de nuit (format HH:MM)
      selector:
        time:
    night_end:
      name: Heure de fin de nuit (format HH:MM)
      selector:
        time:
    wait_before_blind:
      name: Délai (en secondes) après fermeture de fenêtre avant fermeture volet
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: s

mode: single

variables:
  window: !input window_entity
  blind: !input blind_entity
  thermostat: !input thermostat_entity
  temp_trend: !input temp_trend_entity
  weather: !input weather_entity
  night_start_str: !input night_start
  night_end_str: !input night_end
  wait_before_blind: !input wait_before_blind

  current_temp: "{{ state_attr(thermostat, 'current_temperature') | float(0) }}"
  target_temp: "{{ state_attr(thermostat, 'temperature') | float(0) }}"
  outdoor_temp: "{{ state_attr(weather, 'temperature') | float(0) }}"
  temp_rising: "{{ is_state(temp_trend, 'on') }}"
  window_state: "{{ states(window) }}"
  blind_state: "{{ states(blind) }}"

  delta: 1.0
  adjusted_target_high: "{{ target_temp + delta }}"
  adjusted_target_low: "{{ target_temp - delta }}"

  now_time: "{{ now().time() }}"
  night_start_dt: "{{ strptime(night_start_str, '%H:%M').time() }}"
  night_end_dt: "{{ strptime(night_end_str, '%H:%M').time() }}"
  is_night: >
    {% if night_start_dt > night_end_dt %}
      {{ now_time >= night_start_dt or now_time < night_end_dt }}
    {% else %}
      {{ now_time >= night_start_dt and now_time < night_end_dt }}
    {% endif %}

  should_close_blind: >
    {{ (is_night or (temp_rising and current_temp > adjusted_target_high)) and blind_state != 'closed' }}
  should_open_blind: >
    {{ not is_night and not (temp_rising and current_temp > adjusted_target_high) and blind_state == 'closed' }}

  should_open_window: >
    {{ current_temp > adjusted_target_high and outdoor_temp < current_temp and window_state != 'open' }}
  should_close_window: >
    {{ (current_temp <= adjusted_target_low or outdoor_temp >= current_temp) and window_state != 'closed' }}

trigger:
  - platform: time_pattern
    minutes: "/5"  # Vérifie toutes les 5 minutes
  - platform: state
    entity_id:
      - !input thermostat_entity
      - !input temp_trend_entity
      - !input weather_entity

action:
  - choose:
      - conditions: "{{ should_close_blind }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ window_state == 'open' }}"
            then:
              - service: cover.close_cover
                target:
                  entity_id: !input window_entity
              - delay:
                  seconds: "{{ wait_before_blind }}"
          - service: cover.close_cover
            target:
              entity_id: !input blind_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Volet de la pièce '{{ window.split('.')[-1].replace('_', ' ') }}' fermé automatiquement."

      - conditions: "{{ should_open_blind }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input blind_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Volet de la pièce '{{ window.split('.')[-1].replace('_', ' ') }}' ouvert automatiquement."

      - conditions: "{{ should_open_window }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input window_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Fenêtre de la pièce '{{ window.split('.')[-1].replace('_', ' ') }}' ouverte automatiquement."

      - conditions: "{{ should_close_window }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input window_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Fenêtre de la pièce '{{ window.split('.')[-1].replace('_', ' ') }}' fermée automatiquement."
