blueprint:
  name: "Gestion intelligente Velux et Volet"
  description: >
    Gère automatiquement l'ouverture/fermeture d'une fenêtre Velux et de son volet
    en fonction de la température intérieure/extérieure, du thermostat, de l'heure et des conditions météo.
    Ferme automatiquement le volet la nuit ou lors de fortes chaleurs, en s'assurant que la fenêtre est bien fermée.
    Ouvre automatiquement la fenêtre le matin si les conditions sont réunies.
    Envoie une notification en cas de changement d'état de la fenêtre ou du volet.
  domain: automation
  input:
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    weather:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    velux:
      name: Entité de la fenêtre Velux
      selector:
        entity:
          domain: cover
    volet:
      name: Entité du volet roulant
      selector:
        entity:
          domain: cover
    sunset_time:
      name: Heure de fermeture du volet (soir)
      selector:
        time:
    sunrise_time:
      name: Heure d'ouverture automatique du matin
      selector:
        time:
    notify_device:
      name: Appareil à notifier
      selector:
        device:
          integration: mobile_app

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: time
    at: !input sunrise_time
    id: sunrise_trigger

variables:
  weather_entity: !input weather
  thermostat_entity: !input thermostat
  velux_entity: !input velux
  volet_entity: !input volet
  notify_device_id: !input notify_device

  temp_ext: "{{ state_attr(weather_entity, 'temperature') | float(0) }}"
  temp_target: "{{ state_attr(thermostat_entity, 'temperature') | float(22) }}"
  temp_int: "{{ state_attr(thermostat_entity, 'current_temperature') | float(22) }}"
  is_night: "{{ now().strftime('%H:%M:%S') > (states('input_datetime.sunset_time') or '21:00:00') }}"
  velux_state: "{{ states(velux_entity) }}"
  velux_open: "{{ velux_state in ['opening', 'open'] }}"
  temp_diff: "{{ temp_int - temp_ext }}"
  room_name: "{{ area_name(velux_entity) or 'pièce inconnue' }}"
  notify_device_name: >
    {% set dev = device_attr(notify_device_id, 'name') %}
    {{ dev | lower | replace(' ', '_') }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_ext < temp_int and not is_night }}
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux
          - service: "notify.mobile_app_{{ notify_device_name }}"
            data:
              message: "Ouverture de la fenêtre Velux dans {{ room_name }} pour rafraîchir la pièce."

      - conditions:
          - condition: template
            value_template: >
              {{ temp_int <= temp_target and velux_open }}
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input velux
          - service: "notify.mobile_app_{{ notify_device_name }}"
            data:
              message: "Fermeture de la fenêtre Velux dans {{ room_name }} (température atteinte)."

      - conditions:
          - condition: template
            value_template: >
              {{ is_night or (temp_ext > temp_target and temp_int > temp_target) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ velux_open }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: !input velux
                  - delay: "00:00:10"
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet
                  - delay: "00:00:30"
                  - service: cover.open_cover
                    target:
                      entity_id: !input velux
                  - service: "notify.mobile_app_{{ notify_device_name }}"
                    data:
                      message: "Fermeture du volet dans {{ room_name }} après sécurisation de la fenêtre Velux."
            default:
              - service: cover.close_cover
                target:
                  entity_id: !input volet
              - service: "notify.mobile_app_{{ notify_device_name }}"
                data:
                  message: "Fermeture du volet automatique dans {{ room_name }}."

      - conditions:
          - condition: trigger
            id: sunrise_trigger
          - condition: template
            value_template: >
              {{ temp_int > temp_target and temp_ext < temp_int }}
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux
          - service: "notify.mobile_app_{{ notify_device_name }}"
            data:
              message: "Ouverture automatique du matin de la fenêtre Velux dans {{ room_name }}."
