blueprint:
  name: Gestion Velux et Volet
  description: Automatisation intelligente de l’ouverture/fermeture d’une fenêtre de toit Velux et de son volet selon la température, la météo et l’heure.
  domain: automation
  input:
    window_entity:
      name: Entité de la fenêtre
      selector:
        entity:
          domain: cover
    blind_entity:
      name: Entité du volet
      selector:
        entity:
          domain: cover
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    temp_rising_entity:
      name: Entité de tendance à la hausse de température (binary_sensor)
      selector:
        entity:
          domain: binary_sensor
    weather_entity:
      name: Entité météo (Météo France)
      selector:
        entity:
          domain: weather
    night_start:
      name: Heure de début de nuit
      selector:
        time: {}
    night_end:
      name: Heure de fin de nuit
      selector:
        time: {}
    notify_device:
      name: Appareil pour la notification
      description: Entité du type notify.*
      selector:
        entity:
          domain: notify

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: state
    entity_id:
      - !input thermostat
      - !input temp_rising_entity
      - !input weather_entity

variables:
  window_entity: !input window_entity
  blind_entity: !input blind_entity
  thermostat: !input thermostat
  temp_rising_entity: !input temp_rising_entity
  weather_entity: !input weather_entity
  notify_device: !input notify_device
  night_start: !input night_start
  night_end: !input night_end

  night_start_dt: >
    {{ today_at(night_start) }}
  night_end_dt: >
    {{ today_at(night_end) }}
  is_night: >
    {% if night_start_dt > night_end_dt %}
      {{ now() >= night_start_dt or now() < night_end_dt }}
    {% else %}
      {{ now() >= night_start_dt and now() < night_end_dt }}
    {% endif %}

  current_temp: "{{ state_attr(thermostat, 'current_temperature') | float(0) }}"
  target_temp: "{{ state_attr(thermostat, 'temperature') | float(0) }}"
  outdoor_temp: "{{ state_attr(weather_entity, 'temperature') | float(0) }}"
  temp_rising: "{{ is_state(temp_rising_entity, 'on') }}"
  window_state: "{{ states(window_entity) }}"
  blind_state: "{{ states(blind_entity) }}"
  room_name: >
    {{ window_entity.split('.')[-1].split('_')[-1] | replace('-', ' ') | capitalize }}

  should_close_blind: >
    {{ (is_night or (current_temp > (target_temp + 1) and temp_rising)) and blind_state != 'closed' }}
  should_open_blind: >
    {{ not is_night and (current_temp <= (target_temp + 1) or not temp_rising) and blind_state != 'open' }}

  should_open_window: >
    {{ current_temp > (target_temp + 1) and outdoor_temp < current_temp and window_state != 'open' }}
  should_close_window: >
    {{ (current_temp < (target_temp - 1) or outdoor_temp >= current_temp) and window_state != 'closed' }}

action:
  - choose:
      - conditions: "{{ should_close_blind }}"
        sequence:
          - if: "{{ window_state == 'open' }}"
            then:
              - service: cover.close_cover
                target:
                  entity_id: !input window_entity
              - delay: "00:00:10"
          - service: cover.close_cover
            target:
              entity_id: !input blind_entity
          - if: "{{ should_open_window }}"
            then:
              - service: cover.open_cover
                target:
                  entity_id: !input window_entity
          - service: "{{ notify_device }}"
            data:
              message: "Le volet de la {{ room_name }} a été fermé automatiquement."

      - conditions: "{{ should_open_blind }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input blind_entity
          - service: "{{ notify_device }}"
            data:
              message: "Le volet de la {{ room_name }} a été ouvert automatiquement."

      - conditions: "{{ should_close_window }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input window_entity
          - service: "{{ notify_device }}"
            data:
              message: "La fenêtre de la {{ room_name }} a été fermée automatiquement."

      - conditions: "{{ should_open_window }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input window_entity
          - service: "{{ notify_device }}"
            data:
              message: "La fenêtre de la {{ room_name }} a été ouverte automatiquement."
