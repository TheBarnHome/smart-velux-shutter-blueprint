blueprint:
  name: Gestion automatique Velux et Volet
  description: Gère l'ouverture/fermeture d'une fenêtre de toit Velux et son volet selon la température et la période (jour/nuit)
  domain: automation
  input:
    window_entity:
      name: Entité de la fenêtre
      selector:
        entity:
          domain: cover
    blind_entity:
      name: Entité du volet
      selector:
        entity:
          domain: cover
    climate_entity:
      name: Entité du thermostat de la pièce
      selector:
        entity:
          domain: climate
    indoor_temp_rising:
      name: Entité booléenne de tendance à la hausse de température
      selector:
        entity:
          domain: binary_sensor
    outdoor_weather:
      name: Entité météo (Météo France)
      selector:
        entity:
          domain: weather
    night_start:
      name: Heure de début de nuit
      selector:
        time: {}
    night_end:
      name: Heure de fin de nuit
      selector:
        time: {}

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: state
    entity_id:
      - !input window_entity
      - !input blind_entity
      - !input climate_entity
      - !input indoor_temp_rising
      - !input outdoor_weather

variables:
  window_entity: !input window_entity
  blind_entity: !input blind_entity
  climate_entity: !input climate_entity
  temp_rising_entity: !input indoor_temp_rising
  outdoor_weather_entity: !input outdoor_weather
  notify_target: notify.mobile_app_iphone_de_tristan_2

  current_temp: "{{ state_attr(climate_entity, 'current_temperature') | float }}"
  target_temp: "{{ state_attr(climate_entity, 'temperature') | float }}"
  delta: 1
  min_temp: "{{ target_temp - delta }}"
  max_temp: "{{ target_temp + delta }}"

  outdoor_temp: "{{ state_attr(outdoor_weather_entity, 'temperature') | float }}"
  temp_rising: "{{ is_state(temp_rising_entity, 'on') }}"
  window_state: "{{ states[window_entity].state }}"
  blind_state: "{{ states[blind_entity].state }}"

  night_start_dt: "{{ today_at(inputs.night_start) }}"
  night_end_dt: "{{ today_at(inputs.night_end) }}"
  is_night: >
    {% if night_start_dt > night_end_dt %}
      {{ now() >= night_start_dt or now() < night_end_dt }}
    {% else %}
      {{ now() >= night_start_dt and now() < night_end_dt }}
    {% endif %}

  should_close_blind: >
    {{ (is_night or (current_temp > max_temp and temp_rising)) and blind_state != 'closed' }}
  should_open_blind: >
    {{ not is_night and not (current_temp > max_temp and temp_rising) and blind_state != 'open' }}
  should_open_window: >
    {{ current_temp > max_temp and outdoor_temp < current_temp and window_state != 'open' }}
  should_close_window: >
    {{ (current_temp <= min_temp or outdoor_temp >= current_temp) and window_state != 'closed' }}

action:
  - choose:
      - conditions: "{{ should_close_blind }}"
        sequence:
          - if:
              - condition: state
                entity_id: !input window_entity
                state: "open"
            then:
              - service: cover.close_cover
                target:
                  entity_id: !input window_entity
              - delay: "00:00:05"
          - service: cover.close_cover
            target:
              entity_id: !input blind_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Fermeture du volet dans la pièce {{ state_attr(climate_entity, 'friendly_name') }}"
      - conditions: "{{ should_open_blind }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input blind_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Ouverture du volet dans la pièce {{ state_attr(climate_entity, 'friendly_name') }}"
      - conditions: "{{ should_close_window }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input window_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Fermeture de la fenêtre dans la pièce {{ state_attr(climate_entity, 'friendly_name') }}"
      - conditions: "{{ should_open_window }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input window_entity
          - service: notify.mobile_app_iphone_de_tristan_2
            data:
              message: "Ouverture de la fenêtre dans la pièce {{ state_attr(climate_entity, 'friendly_name') }}"
