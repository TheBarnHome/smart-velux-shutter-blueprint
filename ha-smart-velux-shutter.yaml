blueprint:
  name: "Gestion intelligente Velux et Volet"
  description: >
    Gère automatiquement l'ouverture/fermeture d'une fenêtre Velux et de son volet
    en fonction de la température intérieure/extérieure, du thermostat, de l'heure et des conditions météo.
    Ferme automatiquement le volet la nuit ou lors de fortes chaleurs, en s'assurant que la fenêtre est bien fermée.
    Ouvre automatiquement la fenêtre le matin si les conditions sont réunies.
  domain: automation
  input:
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    weather:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    velux:
      name: Entité de la fenêtre Velux
      selector:
        entity:
          domain: cover
    volet:
      name: Entité du volet roulant
      selector:
        entity:
          domain: cover
    sunset_time:
      name: Heure de fermeture du volet (soir)
      selector:
        time:
    sunrise_time:
      name: Heure d'ouverture automatique du matin
      selector:
        time:

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: time
    at: !input sunrise_time
    id: sunrise_trigger

variables:
  weather_entity: !input weather
  thermostat_entity: !input thermostat
  velux_entity: !input velux
  volet_entity: !input volet

  temp_ext: "{{ state_attr(weather_entity, 'temperature') | float(0) }}"
  temp_target: "{{ state_attr(thermostat_entity, 'temperature') | float(22) }}"
  temp_int: "{{ state_attr(thermostat_entity, 'current_temperature') | float(22) }}"
  is_night: "{{ now().strftime('%H:%M:%S') > (states('input_datetime.sunset_time') or '21:00:00') }}"
  velux_state: "{{ states(velux_entity) }}"
  velux_open: "{{ velux_state in ['opening', 'open'] }}"

  # Calcul du moteur d'état : on prépare une liste d'actions à faire
  actions: >
    {% set acts = [] %}
    {% if temp_int > temp_target %}
      {% if velux_open %}
        {% do acts.append('close_velux') %}
        {% do acts.append('close_volet') %}
      {% else %}
        {% do acts.append('close_volet') %}
      {% endif %}
    {% elif temp_int <= temp_target and velux_open %}
      {% do acts.append('close_velux') %}
    {% endif %}
    {% if temp_int > temp_target and temp_ext < temp_int %}
      {% do acts.append('open_velux') %}
    {% endif %}
    {{ acts }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ 'open_velux' in actions }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input velux

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ 'close_volet' in actions }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ velux_open }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: !input velux
                  - delay: "00:00:10"
                  - service: cover.close_cover
                    target:
                      entity_id: !input volet
                  - delay: "00:00:30"
                  - service: cover.open_cover
                    target:
                      entity_id: !input velux
              default:
                - service: cover.close_cover
                  target:
                    entity_id: !input volet

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ 'close_velux' in actions }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input velux