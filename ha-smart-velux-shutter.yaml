blueprint:
  name: Gestion Velux et Volet Automatique
  description: >
    Gère automatiquement l'ouverture et la fermeture d'une fenêtre de toit Velux et de son volet
    selon la température intérieure/extérieure, la consigne de thermostat, la nuit, et la tendance.
  domain: automation
  input:
    velux_window:
      name: Fenêtre Velux
      selector:
        entity:
          domain: cover
    velux_blind:
      name: Volet Velux
      selector:
        entity:
          domain: cover
    thermostat:
      name: Thermostat de la pièce
      selector:
        entity:
          domain: climate
    indoor_temp_rising:
      name: Température intérieure en hausse (booléen)
      selector:
        entity:
          domain: binary_sensor
    weather:
      name: Entité météo (Météo-France)
      selector:
        entity:
          domain: weather
    night_start:
      name: Heure de début de nuit
      selector:
        time: {}
    night_end:
      name: Heure de fin de nuit
      selector:
        time: {}

mode: single

trigger:
  - platform: time_pattern
    minutes: "/15"

variables:
  window: !input velux_window
  blind: !input velux_blind
  thermostat: !input thermostat
  temp_rising_entity: !input indoor_temp_rising
  weather: !input weather
  night_start: !input night_start
  night_end: !input night_end
  current_temp: "{{ state_attr(thermostat, 'current_temperature') | float }}"
  target_temp: "{{ state_attr(thermostat, 'temperature') | float }}"
  outdoor_temp: "{{ state_attr(weather, 'temperature') | float }}"
  temp_rising: "{{ is_state(temp_rising_entity, 'on') }}"
  window_state: "{{ states[window].state }}"
  blind_state: "{{ states[blind].state }}"

  is_night: >
    {% set t1 = night_start.split(':') %}
    {% set t2 = night_end.split(':') %}
    {% set ns = now().replace(hour=t1[0]|int, minute=t1[1]|int, second=0, microsecond=0) %}
    {% set ne = now().replace(hour=t2[0]|int, minute=t2[1]|int, second=0, microsecond=0) %}
    {% if ns > ne %}
      {{ now() >= ns or now() < ne }}
    {% else %}
      {{ now() >= ns and now() < ne }}
    {% endif %}

  should_close_blind: "{{ (is_night or (current_temp > target_temp and temp_rising)) and blind_state != 'closed' }}"
  should_open_blind: "{{ not (is_night or (current_temp > target_temp and temp_rising)) }}"
  should_open_window: "{{ current_temp > target_temp and outdoor_temp < current_temp and window_state != 'opened' }}"
  should_close_window: "{{ not (current_temp > target_temp and outdoor_temp < current_temp) }}"

action:
  - choose:
      # --- Si le volet doit être fermé ---
      - conditions:
          - condition: template
            value_template: "{{ should_close_blind }}"
        sequence:
          # Fermer la fenêtre si elle est ouverte
          - if:
              - condition: template
                value_template: "{{ window_state != 'closed' }}"
            then:
              - service: cover.close_cover
                target:
                  entity_id: "{{ window }}"
              - delay: "00:00:05"
          # Fermer le volet
          - service: cover.close_cover
            target:
              entity_id: "{{ blind }}"
          # Rouvrir la fenêtre si elle devait rester ouverte
          - if:
              - condition: template
                value_template: "{{ should_open_window }}"
            then:
              - delay: "00:00:05"
              - service: cover.open_cover
                target:
                  entity_id: "{{ window }}"

      # --- Si le volet doit être ouvert ---
      - conditions:
          - condition: template
            value_template: "{{ should_open_blind }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: "{{ blind }}"

  # --- Gérer indépendamment la fenêtre ---
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ should_open_window and window_state != 'open' }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: "{{ window }}"
      - conditions:
          - condition: template
            value_template: "{{ should_close_window and window_state != 'closed' }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: "{{ window }}"
