blueprint:
  name: Gestion Velux et Volet Automatique
  description: >
    Ouvre/Ferme automatiquement une fenêtre de toit Velux et son volet en fonction de la température intérieure, extérieure, de la consigne du thermostat, de la tendance, et de l'heure (jour/nuit).
  domain: automation
  input:
    velux_window:
      name: Fenêtre Velux
      selector:
        entity:
          domain: cover
    velux_blind:
      name: Volet Velux
      selector:
        entity:
          domain: cover
    thermostat:
      name: Thermostat
      selector:
        entity:
          domain: climate
    indoor_temp_rising:
      name: Tendance température intérieure (en hausse ?)
      selector:
        entity:
          domain: binary_sensor
    weather:
      name: Entité météo (Météo France)
      selector:
        entity:
          domain: weather
    night_start:
      name: Heure de début de nuit
      selector:
        time: {}
    night_end:
      name: Heure de fin de nuit
      selector:
        time: {}

mode: single
trigger:
  - platform: time_pattern
    minutes: "/5"  # Toutes les 5 minutes
  - platform: state
    entity_id: !input velux_window
  - platform: state
    entity_id: !input velux_blind
  - platform: state
    entity_id: !input thermostat
  - platform: state
    entity_id: !input indoor_temp_rising
  - platform: state
    entity_id: !input weather

condition: []

action:
  - variables:
      window: !input velux_window
      blind: !input velux_blind
      thermostat: !input thermostat
      temp_rising_entity: !input indoor_temp_rising
      weather: !input weather
      now: "{{ now() }}"
      night_start: !input night_start
      night_end: !input night_end
      is_night: >-
        {% set start = now.replace(hour=night_start.split(':')[0]|int, minute=night_start.split(':')[1]|int) %}
        {% set end = now.replace(hour=night_end.split(':')[0]|int, minute=night_end.split(':')[1]|int) %}
        {% if start > end %}
          {{ now >= start or now < end }}
        {% else %}
          {{ now >= start and now < end }}
        {% endif %}
      current_temp: "{{ state_attr(thermostat, 'current_temperature') | float }}"
      target_temp: "{{ state_attr(thermostat, 'temperature') | float }}"
      outdoor_temp: "{{ state_attr(weather, 'temperature') | float }}"
      temp_rising: "{{ is_state(temp_rising_entity, 'on') }}"
      window_state: "{{ states[window].state }}"
      blind_state: "{{ states[blind].state }}"
      should_close_blind: "{{ is_night or (current_temp > target_temp and temp_rising) }}"
      should_open_blind: "{{ not should_close_blind }}"
      should_open_window: "{{ current_temp > target_temp and outdoor_temp < current_temp }}"
      should_close_window: "{{ not should_open_window }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ should_close_blind and blind_state != 'closed' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ window_state != 'closed' }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: "{{ window }}"
                  - delay:
                      seconds: 10
          - service: cover.close_cover
            target:
              entity_id: "{{ blind }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ should_open_window }}"
                sequence:
                  - delay:
                      seconds: 5
                  - service: cover.open_cover
                    target:
                      entity_id: "{{ window }}"
      - conditions:
          - condition: template
            value_template: "{{ should_open_blind and blind_state != 'open' }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: "{{ blind }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ should_open_window and window_state != 'open' and blind_state == 'open' }}"
        sequence:
          - service: cover.open_cover
            target:
              entity_id: "{{ window }}"
      - conditions:
          - condition: template
            value_template: "{{ should_close_window and window_state != 'closed' }}"
        sequence:
          - service: cover.close_cover
            target:
              entity_id: "{{ window }}"