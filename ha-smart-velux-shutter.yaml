blueprint:
  name: Contrôle intelligent Velux et Volet
  description: >
    Ouvre/ferme la fenêtre Velux et/ou le volet selon les températures intérieure/extérieure et l'heure du jour/nuit.
    Inclut une logique de moteur d'état pour ne pas répéter inutilement les actions.
  domain: automation
  input:
    window:
      name: Fenêtre Velux
      selector:
        entity:
          domain: cover
    blind:
      name: Volet
      selector:
        entity:
          domain: cover
    thermostat:
      name: Thermostat (capteur de température intérieure)
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weather:
      name: Capteur de température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temp_rising_entity:
      name: Entité indiquant si la température monte (booléen)
      selector:
        entity:
          domain: input_boolean
    night_start:
      name: Heure début nuit (format HH:MM)
      selector:
        text:
          type: text
    night_end:
      name: Heure fin nuit (format HH:MM)
      selector:
        text:
          type: text

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: state
    entity_id: !input thermostat
  - platform: state
    entity_id: !input weather
  - platform: state
    entity_id: !input temp_rising_entity

variables:
  window: !input window
  blind: !input blind
  thermostat: !input thermostat
  weather: !input weather
  temp_rising_entity: !input temp_rising_entity
  now: "{{ now() }}"
  night_start: !input night_start
  night_end: !input night_end

  night_start_dt: >
    {% set ns = night_start.split(':') %}
    {{ today_at(ns[0]|int ~ ':' ~ ns[1]|int) }}
  night_end_dt: >
    {% set ne = night_end.split(':') %}
    {{ today_at(ne[0]|int ~ ':' ~ ne[1]|int) }}

  is_night: >
    {% if night_start_dt > night_end_dt %}
      {{ now >= night_start_dt or now < night_end_dt }}
    {% else %}
      {{ now >= night_start_dt and now < night_end_dt }}
    {% endif %}

  current_temp: "{{ states(thermostat) | float(0) }}"
  target_temp: "{{ state_attr(thermostat, 'temperature') | float(21) }}"
  outdoor_temp: "{{ states(weather) | float(0) }}"
  temp_rising: "{{ is_state(temp_rising_entity, 'on') }}"

  window_state: "{{ states(window) }}"
  blind_state: "{{ states(blind) }}"

  should_close_blind: "{{ is_night }}"
  should_open_blind: "{{ not is_night }}"
  should_open_window: "{{ current_temp > target_temp and outdoor_temp < current_temp and not is_night }}"
  should_close_window: "{{ temp_rising and current_temp > outdoor_temp }}"

action:
  - choose:
      - conditions: "{{ should_close_blind }}"
        sequence:
          - choose:
              - conditions: "{{ states(window) == 'open' }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: "{{ window }}"
                  - delay: "00:00:10"
                  - service: cover.close_cover
                    target:
                      entity_id: "{{ blind }}"
                  - delay: "00:00:30"
                  - service: cover.open_cover
                    target:
                      entity_id: "{{ window }}"
              default:
                - choose:
                    - conditions: "{{ states(blind) != 'closed' }}"
                      sequence:
                        - service: cover.close_cover
                          target:
                            entity_id: "{{ blind }}"

      - conditions: "{{ should_open_blind }}"
        sequence:
          - choose:
              - conditions: "{{ states(blind) != 'open' }}"
                sequence:
                  - service: cover.open_cover
                    target:
                      entity_id: "{{ blind }}"

  - choose:
      - conditions: "{{ should_open_window }}"
        sequence:
          - choose:
              - conditions: "{{ states(window) != 'open' }}"
                sequence:
                  - service: cover.open_cover
                    target:
                      entity_id: "{{ window }}"

      - conditions: "{{ should_close_window }}"
        sequence:
          - choose:
              - conditions: "{{ states(window) != 'closed' }}"
                sequence:
                  - service: cover.close_cover
                    target:
                      entity_id: "{{ window }}"
